package com.siu.android.athismons.dao.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.siu.android.athismons.dao.model.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CARD.
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Building = new Property(2, String.class, "building", false, "BUILDING");
        public final static Property Street = new Property(3, String.class, "street", false, "STREET");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property PostalCode = new Property(5, String.class, "postalCode", false, "POSTAL_CODE");
        public final static Property AddressComplement = new Property(6, String.class, "addressComplement", false, "ADDRESS_COMPLEMENT");
        public final static Property Picture = new Property(7, String.class, "picture", false, "PICTURE");
        public final static Property Contact = new Property(8, String.class, "contact", false, "CONTACT");
        public final static Property Website = new Property(9, String.class, "website", false, "WEBSITE");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property Phone1 = new Property(11, String.class, "phone1", false, "PHONE1");
        public final static Property Phone2 = new Property(12, String.class, "phone2", false, "PHONE2");
        public final static Property Latitude = new Property(13, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(14, Double.class, "longitude", false, "LONGITUDE");
        public final static Property DirectoryId = new Property(15, long.class, "directoryId", false, "DIRECTORY_ID");
    };

    private Query<Card> directory_CardListQuery;

    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CARD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'BUILDING' TEXT," + // 2: building
                "'STREET' TEXT," + // 3: street
                "'CITY' TEXT," + // 4: city
                "'POSTAL_CODE' TEXT," + // 5: postalCode
                "'ADDRESS_COMPLEMENT' TEXT," + // 6: addressComplement
                "'PICTURE' TEXT," + // 7: picture
                "'CONTACT' TEXT," + // 8: contact
                "'WEBSITE' TEXT," + // 9: website
                "'EMAIL' TEXT," + // 10: email
                "'PHONE1' TEXT," + // 11: phone1
                "'PHONE2' TEXT," + // 12: phone2
                "'LATITUDE' REAL," + // 13: latitude
                "'LONGITUDE' REAL," + // 14: longitude
                "'DIRECTORY_ID' INTEGER NOT NULL );"); // 15: directoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String building = entity.getBuilding();
        if (building != null) {
            stmt.bindString(3, building);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(4, street);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String postalCode = entity.getPostalCode();
        if (postalCode != null) {
            stmt.bindString(6, postalCode);
        }
 
        String addressComplement = entity.getAddressComplement();
        if (addressComplement != null) {
            stmt.bindString(7, addressComplement);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(8, picture);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(9, contact);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(10, website);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String phone1 = entity.getPhone1();
        if (phone1 != null) {
            stmt.bindString(12, phone1);
        }
 
        String phone2 = entity.getPhone2();
        if (phone2 != null) {
            stmt.bindString(13, phone2);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(14, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(15, longitude);
        }
        stmt.bindLong(16, entity.getDirectoryId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // building
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // street
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // postalCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // addressComplement
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picture
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // contact
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // website
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phone1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phone2
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // latitude
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // longitude
            cursor.getLong(offset + 15) // directoryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuilding(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStreet(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPostalCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddressComplement(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicture(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContact(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWebsite(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhone1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhone2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLatitude(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setLongitude(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setDirectoryId(cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cardList" to-many relationship of Directory. */
    public synchronized List<Card> _queryDirectory_CardList(long directoryId) {
        if (directory_CardListQuery == null) {
            QueryBuilder<Card> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.DirectoryId.eq(directoryId));
            directory_CardListQuery = queryBuilder.build();
        } else {
            directory_CardListQuery.setParameter(0, directoryId);
        }
        return directory_CardListQuery.list();
    }

}
